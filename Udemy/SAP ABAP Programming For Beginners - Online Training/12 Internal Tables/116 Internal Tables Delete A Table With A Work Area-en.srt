1
00:00:01,490 --> 00:00:06,220
Now let's take a look at deleting internal
tables where we are using word carriers.

2
00:00:08,310 --> 00:00:12,770
Word carriers are fundamentally different
structures that we set up in our program.

3
00:00:14,310 --> 00:00:18,240
Therefore when we write some code that
affects the internal table,

4
00:00:18,240 --> 00:00:21,480
it will never affect the work area at the
same time.

5
00:00:22,860 --> 00:00:25,060
And also, the reverse is true.

6
00:00:25,060 --> 00:00:29,711
Whatever code we write that affects the
work area structure

7
00:00:29,711 --> 00:00:32,789
will never affect our internal table.

8
00:00:32,789 --> 00:00:37,779
When we're using internal tables with no
header lines, some of the statements

9
00:00:37,779 --> 00:00:41,659
we've just been through will work a little
bit differently.

10
00:00:41,659 --> 00:00:45,235
The clear statement, when used on a table
without a header line,

11
00:00:45,235 --> 00:00:47,650
actually clears the whole table contents.

12
00:00:49,210 --> 00:00:51,905
We saw it make sense because I specified,

13
00:00:51,905 --> 00:00:56,611
make sure you clear the header line, then
you clear the table contents.

14
00:00:56,611 --> 00:01:01,347
But the syntax will work a little
differently here.

15
00:01:01,347 --> 00:01:05,829
So if I show you, see, if I say,

16
00:01:05,829 --> 00:01:12,801
with header line here and I'll copy this
lot, and

17
00:01:12,801 --> 00:01:18,113
show the differences with work area,

18
00:01:18,113 --> 00:01:22,927
so here to clear out the header line

19
00:01:22,927 --> 00:01:27,750
we would actually use this thing.

20
00:01:29,120 --> 00:01:30,900
CLEAR then the table name.

21
00:01:30,900 --> 00:01:32,682
We don't need the square brackets.

22
00:01:32,682 --> 00:01:36,802
[BLANK_AUDIO]

23
00:01:36,802 --> 00:01:40,903
But then, we've gotta keep in mind our
work area is separate, so

24
00:01:40,903 --> 00:01:43,002
we have to clear that out as well.

25
00:01:43,002 --> 00:01:47,321
[BLANK_AUDIO]

26
00:01:47,321 --> 00:01:50,818
So all you need to do is use the CLEAR
statement again and

27
00:01:50,818 --> 00:01:52,730
then specify your work area.

28
00:01:54,820 --> 00:02:02,014
Let's say our example, our work idea is
set to custodial wa_itab01.

29
00:02:02,014 --> 00:02:05,574
As we make our way down to the other
statements,

30
00:02:05,574 --> 00:02:10,211
here the REFRESH statements exactly the
same stuff applies.

31
00:02:10,211 --> 00:02:14,270
We would have REFRESH itab01 to clear out
the table,

32
00:02:14,270 --> 00:02:17,989
which is exactly the same as with the
header line.

33
00:02:17,989 --> 00:02:21,111
But you've gotta remember, treat your work
area

34
00:02:21,111 --> 00:02:25,370
differently because it's a different
structure in its own right.

35
00:02:25,370 --> 00:02:27,056
And the same applies for FREE.

36
00:02:27,056 --> 00:02:31,978
[BLANK_AUDIO]

37
00:02:31,978 --> 00:02:36,578
FREE statement will clear the internal
table from memory and

38
00:02:36,578 --> 00:02:40,916
then we would have to separately clear out
our work area.

39
00:02:40,916 --> 00:02:45,850
[BLANK_AUDIO]

40
00:02:45,850 --> 00:02:49,530
Now this just about wraps up what we will
cover on internal tables.

41
00:02:50,650 --> 00:02:55,070
We have been through all the major key
topics that you'll need to

42
00:02:55,070 --> 00:02:59,700
work with internal tables, both creating
them, filling them up, and

43
00:02:59,700 --> 00:03:01,040
then destroying them afterwards.

44
00:03:02,420 --> 00:03:06,126
So take some time, practice and get used
to these commands because

45
00:03:06,126 --> 00:03:10,710
you will use them again, and again, and
again in the programs you create.

