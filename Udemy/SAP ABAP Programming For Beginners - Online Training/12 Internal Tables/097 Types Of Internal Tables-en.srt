1
00:00:02,240 --> 00:00:07,260
Now, I mentioned earlier that internal
tables are made up of a table body, and

2
00:00:07,260 --> 00:00:09,760
either a header line or a work area.

3
00:00:09,760 --> 00:00:13,860
But from now on, just assume we are
talking about the newer style,

4
00:00:13,860 --> 00:00:15,470
internal table.

5
00:00:15,470 --> 00:00:17,590
And that's an internal table, with a work
area.

6
00:00:19,320 --> 00:00:24,490
As a nice, simple example, an internal
table can be made up of just a number

7
00:00:24,490 --> 00:00:29,030
of individual fields, that correspond to
different columns of a table.

8
00:00:29,030 --> 00:00:31,870
Just like when you created the data
dictionary table,

9
00:00:31,870 --> 00:00:34,670
you created the individual fields.

10
00:00:34,670 --> 00:00:39,510
And if you recall, when we set up that
table, we also identified, key fields.

11
00:00:41,090 --> 00:00:42,510
Or the same thing can apply for

12
00:00:42,510 --> 00:00:46,360
internal tables, but, we have a little bit
more flexibility.

13
00:00:48,430 --> 00:00:53,360
When we declared our table in the ABAP
dictionary, we had to use key fields,

14
00:00:53,360 --> 00:00:57,540
to uniquely identify every record in the
table.

15
00:00:57,540 --> 00:00:59,030
Table.

16
00:00:59,030 --> 00:01:02,040
Internal tables are a little bit
different.

17
00:01:02,040 --> 00:01:07,240
As well as identifying unique records, you
can also specify a non-unique key.

18
00:01:09,190 --> 00:01:13,330
This allows us to store any number of
non-unique records.

19
00:01:14,620 --> 00:01:19,800
So, what I mean is, a unique key will
specify an individual record in our table,

20
00:01:19,800 --> 00:01:21,618
that can only appear once.

21
00:01:21,618 --> 00:01:27,900
But a non-unique key allows us to have any
number of duplicate records we want.

22
00:01:29,200 --> 00:01:31,390
The differences don't just stop there.

23
00:01:31,390 --> 00:01:35,800
We can define, different types of internal
tables too.

24
00:01:35,800 --> 00:01:36,860
And this is mainly so

25
00:01:36,860 --> 00:01:40,970
we can access our data, in the most
efficient manner possible.

26
00:01:42,160 --> 00:01:43,940
What I mean is really, really fast.

27
00:01:45,340 --> 00:01:47,820
So, first of all, we have standard tables.

28
00:01:49,220 --> 00:01:53,630
Now, a standard table, gives us the option
of accessing the records,

29
00:01:53,630 --> 00:01:57,280
using a table key or an index.

30
00:01:57,280 --> 00:02:00,850
I'll show you how to define table keys and
indexes, in a little while.

31
00:02:01,980 --> 00:02:07,080
When we access records using a key in a
standard table, the larger

32
00:02:07,080 --> 00:02:12,330
the internal table is, the longer it will
take to read the records we want, and

33
00:02:12,330 --> 00:02:15,530
this is why, we have the option of using a
table index.

34
00:02:17,970 --> 00:02:21,950
Standard tables don't give the option of
defining a unique key.

35
00:02:23,220 --> 00:02:25,700
Which resorts in the possibility of having

36
00:02:25,700 --> 00:02:28,600
identical lines appearing many times
throughout your table.

37
00:02:29,910 --> 00:02:31,850
Now, as I just mentioned previously,

38
00:02:33,090 --> 00:02:35,551
we don't have to have unique records in
our table.

39
00:02:36,740 --> 00:02:42,686
So, a standard table can hold, any number
of records, that have identical lines.

40
00:02:42,686 --> 00:02:44,707
[BLANK_AUDIO]

41
00:02:44,707 --> 00:02:50,014
Now, although accessing records using a
table key, can take a fair amount of time,

42
00:02:50,014 --> 00:02:54,199
for the standard table with lots of
records, there is a flip side,

43
00:02:54,199 --> 00:02:59,900
in that a standard table can be filled
with records, very, very quickly.

44
00:02:59,900 --> 00:03:03,990
Because the system doesn't have to check
the table key for any duplicate records.

45
00:03:05,710 --> 00:03:07,890
And you'll find that when looking at
programs and

46
00:03:07,890 --> 00:03:13,480
creating your own, standard tables are
really easy to define and work with.

47
00:03:13,480 --> 00:03:17,500
And you will see that they are the most
often used table type within SAP

48
00:03:17,500 --> 00:03:18,610
system programs.

49
00:03:19,910 --> 00:03:22,350
Now, next up, we come to sorted tables.

50
00:03:24,100 --> 00:03:29,550
Now, as you might guess with a sorted
table, we can define a unique key.

51
00:03:29,550 --> 00:03:33,320
This means we can force all records to be
unique in the internal table.

52
00:03:34,735 --> 00:03:36,850
Thus removing any duplication of records.

53
00:03:38,040 --> 00:03:42,020
And like a standard table, we can access
records,

54
00:03:42,020 --> 00:03:46,890
of a sorted table, using the table key, or
using the table index.

55
00:03:48,540 --> 00:03:53,040
Another commonality with standard tables,
is that you can use the table key

56
00:03:53,040 --> 00:03:57,640
to find records, and with standard tables,
I mentioned this can be quite slow,

57
00:03:57,640 --> 00:04:02,080
the bigger your table gets, well the same
sort of thing applies with sorted tables.

58
00:04:02,080 --> 00:04:05,640
But, I must say the performance is a lot
better.

59
00:04:05,640 --> 00:04:08,600
But it still, it's not the best we can
get.

60
00:04:10,310 --> 00:04:15,160
Now, it is preferable to use a sorted
table over a standard table.

61
00:04:15,160 --> 00:04:18,560
One because of the increased speed in
accessing records, but

62
00:04:18,560 --> 00:04:24,310
also because a sorted table, sorts your
records into a specific sequence.

63
00:04:24,310 --> 00:04:27,580
It gives you a performance increase, when
accessing the data.

64
00:04:30,830 --> 00:04:35,260
Now, the final internal table I want to
discuss, is a hashed table.

65
00:04:37,700 --> 00:04:42,560
And hashed tables, do differ from standard
and sorted tables.

66
00:04:42,560 --> 00:04:46,840
In that you do not access the records of a
hash table, using an index.

67
00:04:47,940 --> 00:04:50,330
You will only use a unique key.

68
00:04:52,530 --> 00:04:58,010
Hashed tables, are normally the preferred
internal table, when it comes to speed.

69
00:04:59,420 --> 00:05:03,450
Now, this isn't always the case, but
generally it is.

70
00:05:03,450 --> 00:05:06,920
When you think your internal table is
going to get quite large,

71
00:05:06,920 --> 00:05:09,840
a hash table normally gives you the best
bang for your buck.

72
00:05:11,030 --> 00:05:13,900
And I recommend you use hash tables
whenever you

73
00:05:13,900 --> 00:05:15,510
think you're going to have large internal
tables.

74
00:05:17,700 --> 00:05:22,790
See, these types of tables, use what's
known as a special hash algorithm,

75
00:05:22,790 --> 00:05:26,790
to ensure the response times of reading
records, are maintained,

76
00:05:26,790 --> 00:05:30,970
no matter how many rows of data, your
table contains.

77
00:05:30,970 --> 00:05:32,358
They really are super fast.

78
00:05:32,358 --> 00:05:38,500
Now saying that, you will find that
standard tables and

79
00:05:38,500 --> 00:05:44,700
sorted tables, are used way more, in SAP
programs, than hashed tables.

80
00:05:46,020 --> 00:05:50,760
And because of that reason, we'll stick
with standard unsorted tables,

81
00:05:50,760 --> 00:05:51,350
going forward.

