1
00:00:01,160 --> 00:00:04,770
As we've been creating this program,
you'll have no doubt seen

2
00:00:04,770 --> 00:00:08,390
we're using various different data types
when declaring our variables.

3
00:00:09,410 --> 00:00:14,140
Now, it's a programmer's responsibility to
make sure the data types you use

4
00:00:14,140 --> 00:00:18,410
are compatible with each other when you
use them for calculations or

5
00:00:18,410 --> 00:00:21,850
moving data to and from those objects
throughout your program.

6
00:00:23,550 --> 00:00:27,360
You do not want to be performing any
calculations on variables and

7
00:00:27,360 --> 00:00:28,890
numbers that do not match.

8
00:00:28,890 --> 00:00:30,820
For example,

9
00:00:30,820 --> 00:00:35,930
a variable defined as an integer cannot be
multiplied by a character.

10
00:00:35,930 --> 00:00:41,480
The two data types are incompatible, and
as a result, the system would generate

11
00:00:41,480 --> 00:00:45,630
syntax errors and a runtime error if you
try to execute the program.

12
00:00:47,300 --> 00:00:52,250
Now, SEP have built in some automatic data
type conversions

13
00:00:52,250 --> 00:00:56,270
from many of the standard data types that
are available within ABAP.

14
00:00:57,680 --> 00:01:03,010
There are scenarios where the inbuilt ABAP
conversion rules are not appropriate and

15
00:01:03,010 --> 00:01:07,320
it is important you become familiar with
the inbuilt conversion rules, and

16
00:01:07,320 --> 00:01:11,260
know when to manipulate the data prior to
using them in your calculations.

17
00:01:12,460 --> 00:01:16,420
So, let's take a look at the conversion
rules that currently exist.

18
00:01:16,420 --> 00:01:19,690
We won't go through every one, but you'll
get a good flavor of

19
00:01:19,690 --> 00:01:23,529
what the conversion rules are and how you
can use them throughout your programs.

20
00:01:25,300 --> 00:01:29,270
Now, conversion rules are predefined logic
that determine

21
00:01:29,270 --> 00:01:33,430
how the contents of the source field can
be entered into a target field.

22
00:01:35,520 --> 00:01:40,500
If you have an integer field containing
the value of one, and try to insert that

23
00:01:40,500 --> 00:01:46,080
value into a character string, the built
in conversion rules will determine exactly

24
00:01:46,080 --> 00:01:50,810
how this should be done without throwing
any syntax errors or runtime errors.

25
00:01:51,975 --> 00:01:53,270
Let's have a look at some examples.

26
00:01:56,740 --> 00:02:04,570
So, let's suppose we add a variable called
num1.

27
00:02:04,570 --> 00:02:07,589
[BLANK_AUDIO]

28
00:02:07,589 --> 00:02:09,434
A type packed decimal.

29
00:02:09,434 --> 00:02:19,434
[BLANK_AUDIO]

30
00:02:24,015 --> 00:02:27,906
And we add the results.

31
00:02:27,906 --> 00:02:30,948
Oops, help if I could code properly, hm.

32
00:02:30,948 --> 00:02:34,223
We add the result of type integer.

33
00:02:34,223 --> 00:02:40,665
[BLANK_AUDIO]

34
00:02:40,665 --> 00:02:45,443
If we had a calculation where a packed
decimal number was

35
00:02:45,443 --> 00:02:50,021
moved into an integer field, the inbuilt
conversion

36
00:02:50,021 --> 00:02:54,496
rules would round the decimal places of
num1, up or

37
00:02:54,496 --> 00:02:59,500
down, and insert the contents into the
result one field.

38
00:03:02,230 --> 00:03:04,310
Blimey, you can see I wasn't paying
attention there.

39
00:03:04,310 --> 00:03:10,549
One second, there we go.

40
00:03:10,549 --> 00:03:14,113
So, let's fill this out a little bit more.

41
00:03:14,113 --> 00:03:18,234
So, let's say we had a value of 3.33.

42
00:03:18,234 --> 00:03:25,188
[BLANK_AUDIO]

43
00:03:25,188 --> 00:03:30,146
Okay, so what we will get here is result
one,

44
00:03:30,146 --> 00:03:33,674
with result in a value of three.

45
00:03:33,674 --> 00:03:36,557
Probably best if we output this to our
screen.

46
00:03:36,557 --> 00:03:46,078
[BLANK_AUDIO]

47
00:03:46,078 --> 00:03:48,025
Let's see what we come out with.

48
00:03:48,025 --> 00:03:50,799
[SOUND] There we go.

49
00:03:50,799 --> 00:03:52,920
We end up with a value of three.

50
00:03:52,920 --> 00:04:00,695
And, that's because the inbuilt conversion
rules rounded the number down.

51
00:04:00,695 --> 00:04:05,283
If we add the value of 5.55, and this
time,

52
00:04:05,283 --> 00:04:11,609
result will contain the value 6 because
the rounding will go up.

53
00:04:11,609 --> 00:04:14,490
[SOUND] So, you can see,

54
00:04:14,490 --> 00:04:20,408
automatic conversion rules are being
applied.

55
00:04:20,408 --> 00:04:23,784
As you work with different data types
within your program,

56
00:04:23,784 --> 00:04:28,647
many different conversion rules will be
applied automatically, and as I've stated

57
00:04:28,647 --> 00:04:33,308
before, it's up to you as the programmer
to understand these conversion rules,

58
00:04:33,308 --> 00:04:37,831
understand the data types you are using
within your program to ensure no run time

59
00:04:37,831 --> 00:04:39,000
errors will occur.

