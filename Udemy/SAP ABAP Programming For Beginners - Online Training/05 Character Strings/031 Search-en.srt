1
00:00:01,100 --> 00:00:07,580
We will now take a look at searching for
specific character strings within fields.

2
00:00:07,580 --> 00:00:10,360
We use the statement search to do this
unsurprisingly, and

3
00:00:10,360 --> 00:00:15,100
it has a very simple form.

4
00:00:15,100 --> 00:00:20,010
So we can key in the word search, and we
enter the field we want to search.

5
00:00:20,010 --> 00:00:21,330
So in our case let's use sur name again.

6
00:00:22,940 --> 00:00:29,760
So name two, and then you specify four,
and then the actual search string itself.

7
00:00:31,710 --> 00:00:35,140
Let's say one, two, three, and a full
stop.

8
00:00:35,140 --> 00:00:40,077
Now this type of statement is a little
different to the others,

9
00:00:40,077 --> 00:00:45,030
in that we're not specifying a variable,
to hold any result.

10
00:00:47,000 --> 00:00:48,920
What actually happens with the search
statements,

11
00:00:50,120 --> 00:00:53,520
is two system variables are used.

12
00:00:53,520 --> 00:00:55,920
The first one S-Y-S-U-B-R-C,

13
00:00:55,920 --> 00:01:01,730
which identifies whether the search was
successful or not.

14
00:01:01,730 --> 00:01:08,690
In the second system variable is S-Y dash
F-D-P-O-S.

15
00:01:08,690 --> 00:01:13,230
And if the search was successful this
field is set to the position

16
00:01:13,230 --> 00:01:18,130
of the character string that we are
searching for in surname two.

17
00:01:18,130 --> 00:01:18,820
We'll go ahead and

18
00:01:18,820 --> 00:01:23,020
add some code that will hopefully explain
this a little bit better.

19
00:01:23,020 --> 00:01:27,530
And we'll look at different variations
that will introduce how these

20
00:01:27,530 --> 00:01:32,460
system variables can be used to determine
the success of the individual search.

21
00:01:32,460 --> 00:01:37,390
So if we stick with our surname

22
00:01:37,390 --> 00:01:42,120
two field, obviously we're not going to
find a string of one, two, three.

23
00:01:43,570 --> 00:01:45,275
So let's change this.

24
00:01:45,275 --> 00:01:51,813
[NOISE] And we'll say, search for the
literal string, Joe.

25
00:01:51,813 --> 00:01:57,165
Now, while I remember [NOISE] because
surname2

26
00:01:57,165 --> 00:02:02,662
[NOISE] does get changed in the statements
above.

27
00:02:02,662 --> 00:02:06,940
[BLANK_AUDIO]

28
00:02:06,940 --> 00:02:08,995
Let's reset it right here.

29
00:02:08,995 --> 00:02:13,036
[BLANK_AUDIO]

30
00:02:13,036 --> 00:02:15,660
We'll change the content so it's just Mr.
Joe Smith.

31
00:02:17,920 --> 00:02:22,500
So our first search statements just looks
for the word Joe and

32
00:02:22,500 --> 00:02:28,120
it should be successful.

33
00:02:28,120 --> 00:02:31,660
So what we will do is start to trace a
small report section that shows us

34
00:02:31,660 --> 00:02:33,150
the values of the system veritable.

35
00:02:34,290 --> 00:02:36,790
I'll just pause the recording to do this.

36
00:02:36,790 --> 00:02:39,050
And once complete we can step through it
line by line.

37
00:02:39,050 --> 00:02:41,860
So first off,

38
00:02:41,860 --> 00:02:47,650
we're using the surname 2 variable as
before.

39
00:02:49,930 --> 00:02:53,580
I'm just writing, I'm just writing out a
line here to show the actual search

40
00:02:53,580 --> 00:02:56,870
string, that we are using.

41
00:02:56,870 --> 00:02:58,600
And then we come to our first search
statement.

42
00:02:58,600 --> 00:03:07,160
So this is SEARCH surname2, FOR and we've
got Joe with some spaces after in quotes.

43
00:03:08,330 --> 00:03:13,100
So what this is saying is, we wanna search
for the word Joe, but the trailing

44
00:03:13,100 --> 00:03:17,210
spaces with the way we're using search
here, ere going to be ignored.

45
00:03:17,210 --> 00:03:23,260
And then the output would show literal
string, for what we are searching for.

46
00:03:24,920 --> 00:03:29,470
And then, we're going to output the system
variables.

47
00:03:29,470 --> 00:03:30,528
sy subrc.

48
00:03:30,528 --> 00:03:35,910
Natural value, and sy-fdpos.

49
00:03:35,910 --> 00:03:36,490
And the actual value.

50
00:03:38,150 --> 00:03:42,680
So in this case, we should get a subrc
equal to zero.

51
00:03:42,680 --> 00:03:45,980
Which means it was a successful search and

52
00:03:45,980 --> 00:03:51,520
the position of the search string will
show the position offset in

53
00:03:52,780 --> 00:03:57,570
accordance with where it appears within a
surname two field.

54
00:04:01,380 --> 00:04:04,770
And the next one, we have a very similar
search term,

55
00:04:04,770 --> 00:04:10,300
but this time the system will not ignore
blank spaces.

56
00:04:10,300 --> 00:04:15,989
So the system will actually search for Joe
With,

57
00:04:15,989 --> 00:04:21,280
I think it's four spaces after the letter
E.

58
00:04:21,280 --> 00:04:26,550
And if we look at our surname2 field,
there's only one space after the letter E.

59
00:04:26,550 --> 00:04:30,290
So it should return subrc equal 4,

60
00:04:30,290 --> 00:04:34,470
which means an unsuccessful search.

61
00:04:35,490 --> 00:04:40,850
And because it was unsuccessful, then the
SYFD positive value will be zero.

62
00:04:42,300 --> 00:04:45,480
Then the next search, this is using a
wildcard.

63
00:04:45,480 --> 00:04:50,620
And the way we have the search defined
here, it will search for

64
00:04:50,620 --> 00:04:52,350
any word within the string.

65
00:04:54,180 --> 00:04:56,550
That ends with I-T-H.

66
00:04:56,550 --> 00:04:59,350
Now because we have Smith, and

67
00:04:59,350 --> 00:05:03,810
it ends with I-T-H, H should be a
successful search, and

68
00:05:03,810 --> 00:05:07,680
we should get the offset position, and get
the pause system variable.

69
00:05:09,530 --> 00:05:14,740
And the last example, It's another wild
card search, but

70
00:05:14,740 --> 00:05:21,880
this time we're going to be searching for
any word starting with Smi.

71
00:05:21,880 --> 00:05:26,240
And the variable we are searching does
contain the word Smith.

72
00:05:26,240 --> 00:05:29,130
So we should get a successful search.

73
00:05:29,130 --> 00:05:33,410
And again, the sy-fdpos system variable.

74
00:05:33,410 --> 00:05:38,020
Will be filled with the offset value
relating to the position of the word.

75
00:05:38,020 --> 00:05:40,060
So, let's run this test.

76
00:05:41,330 --> 00:05:43,410
And will have a look at the output.

77
00:05:43,410 --> 00:05:48,400
That'll become, and hopefully you'll be
able to see exactly what I'm explaining.

78
00:05:48,400 --> 00:05:51,603
And you'll see the results in the sy
fields.

79
00:05:51,603 --> 00:05:57,429
[BLANK_AUDIO]

80
00:05:57,429 --> 00:05:58,930
So we can see the search results.

81
00:06:00,740 --> 00:06:06,450
Here we show an actual search string, and
the first search example we

82
00:06:06,450 --> 00:06:11,490
can see it was a successful search because
sy-subrc is set to zero.

83
00:06:12,530 --> 00:06:15,710
And the f d pulse value is set to three.

84
00:06:15,710 --> 00:06:19,200
Which relates to the third character in
our string.

85
00:06:20,370 --> 00:06:21,700
That's the offset.

86
00:06:21,700 --> 00:06:27,490
So the search term, Joe, would start one
character after the offset value.

87
00:06:28,750 --> 00:06:33,990
And the next example, we were searching
for Joe again, but we included spaces.

88
00:06:37,310 --> 00:06:42,370
Notice the surname 2 field did not contain
enough spaces.

89
00:06:42,370 --> 00:06:49,080
It was a failed search and the sy-subrc
field is set to fall to indicate that.

90
00:06:49,080 --> 00:06:53,230
And because it was failed, sy-fdpos is set
to 0.

91
00:06:53,230 --> 00:06:58,910
The third example with the wild count
search where we're looking for

92
00:06:58,910 --> 00:07:01,220
any word ending in ith.

93
00:07:01,220 --> 00:07:08,260
It was successful and it's showing the
word starts after the value 7 offset.

94
00:07:11,260 --> 00:07:12,540
Terrific.
So if we look at the search tab,

95
00:07:12,540 --> 00:07:17,850
we can see the offset value number 7, it's
the space after the letter e of Joe,

96
00:07:17,850 --> 00:07:22,500
telling us that the next word in the
string is what we were searching for.

97
00:07:22,500 --> 00:07:27,040
And the last example, very similar, but

98
00:07:27,040 --> 00:07:33,410
this is showing words starting with SMI.

99
00:07:33,410 --> 00:07:34,960
Exactly the same.

100
00:07:34,960 --> 00:07:37,750
Successful search, indicated by subrc
equals zero, and

101
00:07:37,750 --> 00:07:43,350
the word Smith is the word that contains
SMI, and again, it's the same position,

102
00:07:43,350 --> 00:07:47,980
starting one connector after the position
seven offset.

103
00:07:50,510 --> 00:07:53,470
That's four different variations of the
search command.

104
00:07:53,470 --> 00:07:57,620
Very useful throughout your program when
dealing with long character strings.

