1
00:00:00,410 --> 00:00:04,550
Now, instead of typing in the function
module name, I'm just going to put part of

2
00:00:04,550 --> 00:00:09,800
the name in and use wildcard characters to
do a search for the function module.

3
00:00:09,800 --> 00:00:14,120
Just to help demonstrate really how many
function modules there are and

4
00:00:14,120 --> 00:00:17,150
how you would go about searching out
function modules yourself.

5
00:00:19,580 --> 00:00:23,040
So what I'm going to do is key in an
asterisk and

6
00:00:23,040 --> 00:00:27,120
then key in the word amount followed by
another asterisk and then press F4.

7
00:00:27,120 --> 00:00:32,720
Now this is showing me in this system,

8
00:00:32,720 --> 00:00:37,370
I do have some filters set but there are
12 results that have come back.

9
00:00:39,680 --> 00:00:42,540
And what I specifically want to show here

10
00:00:42,540 --> 00:00:46,350
is we get the function module which is in
blue.

11
00:00:46,350 --> 00:00:50,300
But then we get the function group which
is above it.

12
00:00:50,300 --> 00:00:53,400
And we can see there are various function
modules

13
00:00:53,400 --> 00:00:56,430
within our search that belong to the same
function group.

14
00:00:57,930 --> 00:01:02,490
So let's say we, we don't know the exact
function module we want, but

15
00:01:02,490 --> 00:01:04,530
we like the look of, say, these here.

16
00:01:04,530 --> 00:01:05,807
There's four here.

17
00:01:05,807 --> 00:01:08,743
They're in this ISOC group.

18
00:01:08,743 --> 00:01:11,877
Now maybe there are more function modules
in this group, but

19
00:01:11,877 --> 00:01:14,040
just don't have the word amount in them.

20
00:01:15,080 --> 00:01:18,143
So what we can do is close this window.

21
00:01:18,143 --> 00:01:22,648
And we'll go to transaction SE80.

22
00:01:22,648 --> 00:01:27,662
Now, SE80, I mentioned before is the
object navigator.

23
00:01:27,662 --> 00:01:32,433
And you'll find that you will use SE80 a
lot more than SE38.

24
00:01:32,433 --> 00:01:38,579
But we've been using SE38, just to keep
focused on ABAP programming itself.

25
00:01:38,579 --> 00:01:43,447
SE80 let's you do the ABAP programming,
you know, the ABAP editor, but

26
00:01:43,447 --> 00:01:46,261
it also lets you go into function modules
and

27
00:01:46,261 --> 00:01:49,700
all other development objects within an
SAP system.

28
00:01:52,290 --> 00:01:54,544
So by coming to this drop down,

29
00:01:54,544 --> 00:01:58,291
you can see that we can look up all sorts
of objects.

30
00:01:58,291 --> 00:02:03,203
We can bring up programs.

31
00:02:03,203 --> 00:02:05,675
If I double click, we'll see the program
over here.

32
00:02:05,675 --> 00:02:09,692
[BLANK_AUDIO]

33
00:02:09,692 --> 00:02:12,872
Packages, Function Groups, all sorts of
things.

34
00:02:12,872 --> 00:02:16,490
Classes and Interfaces when you go on to
ABAP objects.

35
00:02:16,490 --> 00:02:17,910
Business server pages and so on.

36
00:02:19,470 --> 00:02:21,460
And depending how you have this figured,

37
00:02:21,460 --> 00:02:25,250
that will determine what comes up in your
drop-down.

38
00:02:25,250 --> 00:02:26,680
So I want to go back to Function Groups.

39
00:02:30,010 --> 00:02:32,990
And we're going to key in ISOC,

40
00:02:32,990 --> 00:02:37,710
which was the function group of those four
function

41
00:02:37,710 --> 00:02:41,190
modules that had the word amount in there
that we just previously looked at.

42
00:02:41,190 --> 00:02:44,590
So I'll key it in, press enter, and

43
00:02:44,590 --> 00:02:47,530
then you see the various objects that
belong to this function group.

44
00:02:48,620 --> 00:02:53,780
And the one we're interested in is
function modules, and as you can see

45
00:02:53,780 --> 00:02:58,630
these are the four function modules that
turned up in our search, but

46
00:02:58,630 --> 00:03:02,120
in actual fact, there are a whole bunch of
function modules that belong

47
00:03:02,120 --> 00:03:05,680
to this function group that may be of some
interest.

48
00:03:05,680 --> 00:03:10,050
And all we need to do to have a look to
see if these are what we want,

49
00:03:10,050 --> 00:03:14,560
is double click and we will get to see the
code on the right hand side.

50
00:03:14,560 --> 00:03:21,433
And just like any normal program, we can
test out the function module.

51
00:03:21,433 --> 00:03:22,887
Now I'm gonna close this window.

52
00:03:22,887 --> 00:03:26,567
[BLANK_AUDIO]

53
00:03:26,567 --> 00:03:28,110
And come back to our previous session.

54
00:03:29,800 --> 00:03:33,940
Now the one we're going to work with is
actually called spell amount.

55
00:03:35,270 --> 00:03:36,952
It's a very simple function module.

56
00:03:36,952 --> 00:03:38,927
[BLANK_AUDIO]

57
00:03:38,927 --> 00:03:42,797
But it includes everything we want to see
when trying to work out how function

58
00:03:42,797 --> 00:03:43,590
modules work.

59
00:03:44,750 --> 00:03:47,406
So we'll select spell amount, and then
choose display.

60
00:03:47,406 --> 00:03:50,088
[BLANK_AUDIO]

61
00:03:50,088 --> 00:03:54,099
And what I'm gonna do now, is go along
each of these tabs, and

62
00:03:54,099 --> 00:03:59,920
explain what they mean, and what's inside,
and how we use them with function modules.

63
00:03:59,920 --> 00:04:03,160
So first of all, we have the function
module attributes.

64
00:04:03,160 --> 00:04:07,660
Here you can see we have the function
group that this function module belongs

65
00:04:07,660 --> 00:04:11,380
to, and we have some text to describe the
function module and group.

66
00:04:13,050 --> 00:04:14,970
And we have various options further down.

67
00:04:16,820 --> 00:04:20,360
Processing type defines the actual type of
function module.

68
00:04:20,360 --> 00:04:24,490
This one is defined as normal but

69
00:04:24,490 --> 00:04:29,070
we can have remote enabled which means it
can get triggered from an external system.

70
00:04:30,180 --> 00:04:31,890
And then the update module, you can see.

71
00:04:31,890 --> 00:04:34,350
This is set to start immediate,

72
00:04:34,350 --> 00:04:38,070
and we have some various other options,
such as start delayed.

73
00:04:39,120 --> 00:04:42,760
And then just basic information about when
the function module was created.

74
00:04:45,900 --> 00:04:47,200
Let's move on to the import tab.

75
00:04:50,450 --> 00:04:55,590
Now, this lists the individual fields we
will use for our data interface for

76
00:04:55,590 --> 00:04:58,050
data we pass into the function module.

77
00:04:59,650 --> 00:05:03,610
So, if we look at this from a function
module perspective, it's going to be

78
00:05:03,610 --> 00:05:08,760
importing information that it can use
during the processing of its code.

79
00:05:10,300 --> 00:05:13,221
And in this case, we got four fields, an
amount,

80
00:05:13,221 --> 00:05:15,230
a currency, a filler and a language.

81
00:05:16,560 --> 00:05:21,363
And we have some text on the right hand
side to give some information about

82
00:05:21,363 --> 00:05:23,105
what the actual field is.

83
00:05:23,105 --> 00:05:28,923
[BLANK_AUDIO]

84
00:05:28,923 --> 00:05:33,323
And we have a couple of check boxes.

85
00:05:33,323 --> 00:05:35,210
Hm, made them wide enough.

86
00:05:35,210 --> 00:05:37,020
The first one is optional.

87
00:05:37,020 --> 00:05:39,200
That means with this function module,

88
00:05:39,200 --> 00:05:43,590
all of the fields that get imported,
they're all optional fields.

89
00:05:43,590 --> 00:05:45,530
We don't have to fill them in.

90
00:05:45,530 --> 00:05:50,700
When we call this function module from our
program, more often than not,

91
00:05:50,700 --> 00:05:53,140
you will get some mandatory fields.

92
00:05:53,140 --> 00:05:55,290
But this one, every field is optional.

93
00:05:57,380 --> 00:05:59,150
And then we have pass by value.

94
00:05:59,150 --> 00:06:02,060
Which means it's going to pass the actual
value into the function module.

95
00:06:04,110 --> 00:06:05,400
Let's move onto the export tab.

96
00:06:08,240 --> 00:06:10,480
Now once the function module does its
work, the fields

97
00:06:11,920 --> 00:06:16,640
defined in the export tab are what get
sent back to our calling program.

98
00:06:17,920 --> 00:06:20,940
So again, from a function module
perspective,

99
00:06:20,940 --> 00:06:24,710
it exports this information out to whoever
called it.

100
00:06:27,620 --> 00:06:28,680
Then we have a changing tab.

101
00:06:28,680 --> 00:06:30,690
And as you might guess,

102
00:06:30,690 --> 00:06:34,570
this just lists fields that would be
changed by the function module.

103
00:06:36,460 --> 00:06:41,640
That is, we can identify fields that we
send into the function module,

104
00:06:41,640 --> 00:06:44,630
the function module may then change the
values, and

105
00:06:44,630 --> 00:06:47,780
these fields are then returned back to our
calling program.

106
00:06:49,760 --> 00:06:54,513
So where the field's on the import tab,
the functional module only receives in.

107
00:06:54,513 --> 00:06:59,325
The export, the functional module only
sends them back out to whoever called.

108
00:06:59,325 --> 00:07:04,900
The changing, it receives data in, changes
it and then sends it back out.

109
00:07:04,900 --> 00:07:08,059
So it's a combination of the two, really.

110
00:07:08,059 --> 00:07:10,150
Then we have tables.

111
00:07:10,150 --> 00:07:12,750
And just like when we looked at
subroutines,

112
00:07:12,750 --> 00:07:16,390
we're not restricted to just passing in
individual fields.

113
00:07:16,390 --> 00:07:18,930
We can pass in internal tables as well.

114
00:07:19,990 --> 00:07:22,200
And this is where internal tables would be
set up.

115
00:07:26,280 --> 00:07:27,410
Now the exceptions tab.

116
00:07:28,680 --> 00:07:33,820
Every function module has the ability to
pass back exception information

117
00:07:33,820 --> 00:07:37,470
to indicate if the function module was
executed successfully or not.

118
00:07:37,470 --> 00:07:42,800
And we're not just limited to finding out
if it was successful.

119
00:07:42,800 --> 00:07:46,210
But we can also determine specific error
messages.

120
00:07:46,210 --> 00:07:48,400
So we could have a whole list of
exceptions here.

121
00:07:48,400 --> 00:07:52,279
And as you can see with this function
module, we have not NOT_FOUND,

122
00:07:52,279 --> 00:07:57,030
we have TOO_LARGE, and we could have a
whole host of other messages that get

123
00:07:57,030 --> 00:07:58,860
passed back to our program,

124
00:07:58,860 --> 00:08:03,730
to help us determine why the function
module didn't execute as we wanted it to.

125
00:08:05,400 --> 00:08:07,740
These exceptions are not fixed.

126
00:08:07,740 --> 00:08:11,380
Every function module defines its own
exceptions.

127
00:08:11,380 --> 00:08:14,470
It's just like passing messages back to
the calling program

128
00:08:14,470 --> 00:08:16,890
just to indicate if worked, or not.

129
00:08:16,890 --> 00:08:18,360
And, if it didn't, why didn't it work?

130
00:08:19,440 --> 00:08:22,410
So that the calling program can then use
its own logic to

131
00:08:22,410 --> 00:08:24,080
determine what it should do next.

132
00:08:26,350 --> 00:08:29,079
And the last tab is the source code
itself.

133
00:08:29,079 --> 00:08:31,435
[BLANK_AUDIO]

134
00:08:31,435 --> 00:08:35,961
So this is where a programmer creates the
ABAP that

135
00:08:35,961 --> 00:08:41,133
processes the data that was passed in, it
sends data back

136
00:08:41,133 --> 00:08:46,090
out through the export, it can change
variables, and

137
00:08:46,090 --> 00:08:51,731
also update internal tables and then
report any exceptions.

138
00:08:51,731 --> 00:08:55,920
So just by looking at this code, it can
see some comments here.

139
00:08:57,440 --> 00:09:01,210
It's showing you the fields it's
importing, the fields that it will export,

140
00:09:01,210 --> 00:09:02,200
in this case just one.

141
00:09:03,300 --> 00:09:04,255
And any exceptions.

142
00:09:04,255 --> 00:09:09,096
[BLANK_AUDIO]

143
00:09:09,096 --> 00:09:14,347
The programmer in this case, starts out
with a describe field statements,

144
00:09:14,347 --> 00:09:16,573
and we've got an if statement.

145
00:09:16,573 --> 00:09:19,212
And we can just continue down to have a
look at the code and

146
00:09:19,212 --> 00:09:20,680
try to determine what it does.

147
00:09:21,820 --> 00:09:25,960
Now the beauty about function modules that
have already been created is,

148
00:09:25,960 --> 00:09:29,220
we don't need to know what the code is
doing.

149
00:09:29,220 --> 00:09:33,420
Because hopefully, we know what this
function module should return to us.

150
00:09:33,420 --> 00:09:37,000
And in this case, this specific function
module.

151
00:09:37,000 --> 00:09:40,669
What it does, it turns a numeric value
into words.

152
00:09:40,669 --> 00:09:44,300
So let's say you had to send out printed
checks.

153
00:09:44,300 --> 00:09:49,308
Well maybe your program could call this,
pass it in a numeric value, this would

154
00:09:49,308 --> 00:09:54,646
return the value spelled out in words, and
then you could output that on the checks.

155
00:09:54,646 --> 00:09:57,699
[BLANK_AUDIO]

