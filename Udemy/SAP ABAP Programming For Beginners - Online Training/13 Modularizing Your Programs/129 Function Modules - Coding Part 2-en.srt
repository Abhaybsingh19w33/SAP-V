1
00:00:01,780 --> 00:00:04,190
Okay, so now we have the right statements,
and

2
00:00:04,190 --> 00:00:08,990
it's going to write out the error code to
the screen if there is an error.

3
00:00:08,990 --> 00:00:13,240
The next thing we want to do, is to be
able to write out to the screen

4
00:00:13,240 --> 00:00:17,010
the amount in words that the function
module will return to us.

5
00:00:17,010 --> 00:00:22,892
So, why don't we change this into an
[UNKNOWN] statement.

6
00:00:22,892 --> 00:00:33,050
[BLANK_AUDIO].

7
00:00:33,050 --> 00:00:40,317
We can say "the amount in words is" and

8
00:00:40,317 --> 00:00:45,162
then we just need to output

9
00:00:45,162 --> 00:00:52,880
the variable that's returned to us.

10
00:00:52,880 --> 00:00:58,200
Now in this case, the variable that the
function module returns is inwards,

11
00:00:59,250 --> 00:01:00,970
you will see that we've got an equals
sign,

12
00:01:00,970 --> 00:01:06,180
but we need to assign our own variable
right here.

13
00:01:06,180 --> 00:01:08,150
So let's use one called result.

14
00:01:11,340 --> 00:01:13,130
Now of course we have to define result.

15
00:01:14,750 --> 00:01:18,766
So I'm just going to save the program, do
some forward navigation

16
00:01:18,766 --> 00:01:22,726
to see how IN_WORDS is actually defined in
the function module.

17
00:01:22,726 --> 00:01:30,469
[BLANK_AUDIO]

18
00:01:30,469 --> 00:01:35,014
So we can see here it's defined by using

19
00:01:35,014 --> 00:01:40,266
the light statement and referring to
spell.

20
00:01:40,266 --> 00:01:43,562
And you can see spell is actually a
structure and

21
00:01:43,562 --> 00:01:46,700
it's made up of all these individual.

22
00:01:46,700 --> 00:01:47,760
Fields.

23
00:01:47,760 --> 00:01:49,847
So we can do exactly the same.

24
00:01:49,847 --> 00:01:56,605
[BLANK_AUDIO]

25
00:01:56,605 --> 00:02:00,302
So back in our code,

26
00:02:00,302 --> 00:02:05,521
[SOUND] lets define results,

27
00:02:05,521 --> 00:02:09,004
[SOUND] like spell.

28
00:02:09,004 --> 00:02:13,579
[BLANK_AUDIO]

29
00:02:13,579 --> 00:02:17,276
If we double click spell, oops, oh,

30
00:02:17,276 --> 00:02:23,168
looks like a three click [LAUGH] it takes
us to the structure and

31
00:02:23,168 --> 00:02:29,301
we can see that, our reference is working
fine in the program.

32
00:02:29,301 --> 00:02:34,149
So now we can uncomment inwards which
means when the function

33
00:02:34,149 --> 00:02:39,095
module executes successfully inwards will
be transferred to

34
00:02:39,095 --> 00:02:42,720
our result variable, which is a structure.

35
00:02:43,890 --> 00:02:49,182
And we can output it when the my-subrc
return code is zero.

36
00:02:49,182 --> 00:02:55,241
[BLANK_AUDIO]

37
00:02:55,241 --> 00:03:00,332
Now, we need to ensure importing is still
there because

38
00:03:00,332 --> 00:03:04,991
we're gonna be importing the in words
variable and

39
00:03:04,991 --> 00:03:10,732
assigning it to result, and also because
result is a structure

40
00:03:10,732 --> 00:03:16,970
the write statements will probably not be
able to write out result.

41
00:03:16,970 --> 00:03:21,460
It will probably not be able to do
automatic conversion because remember,

42
00:03:21,460 --> 00:03:26,280
looking at the structure it had a mix of
data types in it.

43
00:03:27,680 --> 00:03:28,750
So I'm just gonna save the code.

44
00:03:28,750 --> 00:03:35,425
We have a look at SPELL which our results
structure is based on.

45
00:03:35,425 --> 00:03:39,445
Here you can see we have NUMC, integers,
and characters, all mixed in.

46
00:03:41,855 --> 00:03:44,725
So, in this case, I think we should get
syntax errors.

47
00:03:44,725 --> 00:03:45,461
Let's have a look.

48
00:03:45,461 --> 00:03:49,838
[BLANK_AUDIO]

49
00:03:49,838 --> 00:03:51,595
Result cannot be converted.

50
00:03:51,595 --> 00:03:56,752
Yeah, so if you remember when we tested
our

51
00:03:56,752 --> 00:04:02,625
function module lets go back in and test
it okay,

52
00:04:02,625 --> 00:04:09,788
I need a number to work with what actually
gets returned is,

53
00:04:09,788 --> 00:04:16,555
it's like a whole record made up of
individual fields.

54
00:04:16,555 --> 00:04:23,056
So we have number, decimal, currency and
then word, and word is is quite large.

55
00:04:23,056 --> 00:04:25,215
We carry on.

56
00:04:25,215 --> 00:04:28,895
Another field called DEC word.

57
00:04:28,895 --> 00:04:31,101
And then some more.

58
00:04:31,101 --> 00:04:34,293
Actually breaking the words up into
individual fields themselves.

59
00:04:35,330 --> 00:04:38,240
So we are getting returned a lot more than
just a piece of text, so

60
00:04:38,240 --> 00:04:40,070
we have to cater for that.

61
00:04:40,070 --> 00:04:43,710
So, I'll step back to the program and

62
00:04:47,070 --> 00:04:49,930
if we look at the structure of spell.

63
00:04:49,930 --> 00:04:55,160
Again, the piece of text we're really
interested in,

64
00:04:56,830 --> 00:05:02,700
is the one that gets assigned to the field
word so that's what we need to write

65
00:05:02,700 --> 00:05:08,685
out in our write statements.

66
00:05:08,685 --> 00:05:10,000
So back down where we have

67
00:05:11,310 --> 00:05:15,510
result all we need to do is reference the
field inside the structure.

68
00:05:18,690 --> 00:05:25,740
And there's one more glaring mistake, or
just something I forgot to do and that's

69
00:05:25,740 --> 00:05:30,470
we need to feed in the amount that we're
going to fill in on the selection screen.

70
00:05:32,630 --> 00:05:35,910
So on the selection screen, we're using
the variable mynum.

71
00:05:37,100 --> 00:05:39,759
So that's what we need to put here.

72
00:05:39,759 --> 00:05:41,340
M Y N U M.

73
00:05:43,880 --> 00:05:45,876
Now I think that should just about do it.

74
00:05:45,876 --> 00:05:50,659
[BLANK_AUDIO]

75
00:05:50,659 --> 00:05:54,257
Let's activate, and then we'll test it
out.

76
00:05:54,257 --> 00:05:58,320
[BLANK_AUDIO]

77
00:05:58,320 --> 00:06:01,815
So we'll use 46,791.

78
00:06:01,815 --> 00:06:06,099
[BLANK_AUDIO]

79
00:06:06,099 --> 00:06:09,899
And we get the amount is 46,791.

80
00:06:09,899 --> 00:06:14,578
We have success.

81
00:06:14,578 --> 00:06:15,445
So there you go.

82
00:06:15,445 --> 00:06:18,906
That's how you call a function module.

83
00:06:18,906 --> 00:06:20,915
It's quite straight forward and

84
00:06:20,915 --> 00:06:25,076
what I would advise is always use the
pattern function inside the ABAP

85
00:06:25,076 --> 00:06:29,610
editor because it gives you all the
variables to work with automatically.

86
00:06:32,440 --> 00:06:37,160
Now from here you should be able to use
any function module that is inside SAP

87
00:06:38,540 --> 00:06:42,040
and by having so many function modules
available to you,

88
00:06:42,040 --> 00:06:45,410
you should be able to more or less copy.

89
00:06:46,640 --> 00:06:49,190
How existing function modules are set up
and create your own.

