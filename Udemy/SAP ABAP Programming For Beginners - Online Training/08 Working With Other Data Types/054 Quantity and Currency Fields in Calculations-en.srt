1
00:00:02,870 --> 00:00:05,850
We will now focus on quantity and currency
fields.

2
00:00:07,250 --> 00:00:12,570
And in ABAP these fields are treated just
like PAC number fields, and

3
00:00:12,570 --> 00:00:16,950
as such you need to declare your currency
field as a PAC number.

4
00:00:18,470 --> 00:00:23,160
When you do this, always bear in mind how
many decimal places you want.

5
00:00:23,160 --> 00:00:27,160
Just as we did with the hours diff field
in the previous exercise.

6
00:00:29,010 --> 00:00:33,970
Now in a real life scenario the number of
decimal places has a great impact

7
00:00:33,970 --> 00:00:38,880
on the accuracy of your calculations in
your program and

8
00:00:38,880 --> 00:00:42,630
quite often, your program will use a much
higher number of decimal

9
00:00:42,630 --> 00:00:46,210
places in your calculations than those
actually show in our list reports.

10
00:00:48,560 --> 00:00:50,630
Now quite often in your programs,

11
00:00:50,630 --> 00:00:55,180
you want to create your own variables for
quantity and currency fields.

12
00:00:56,380 --> 00:01:00,240
But you'll find it's a lot better to
associate your fields with

13
00:01:00,240 --> 00:01:04,160
the data type of fields of a table in the
ABAP dictionary.

14
00:01:04,160 --> 00:01:11,330
And the reason why I say this is because
the ABAP dictionary already has the field

15
00:01:11,330 --> 00:01:15,540
lens and number of decimal places already
defined for individual fields.

16
00:01:16,570 --> 00:01:20,150
Take our salary field in our employees
table.

17
00:01:20,150 --> 00:01:25,220
We defined two decimal places, so if we
declare a currency

18
00:01:25,220 --> 00:01:30,360
field in our program to match that of
salary in our employees table,

19
00:01:30,360 --> 00:01:35,040
we would normally have to refer back to
the table itself, find out how many

20
00:01:35,040 --> 00:01:39,960
decimal places there were, and then define
that manually in our ABAP program.

21
00:01:41,170 --> 00:01:44,410
Now there could be a scenario where the
number of decimal places in the table

22
00:01:44,410 --> 00:01:50,650
would change, but our program, because we
define it by ourselves using a type p for

23
00:01:50,650 --> 00:01:55,330
parent decimal, we could then have an
incorrect number of decimal places

24
00:01:55,330 --> 00:01:59,960
in our program if the field is supposed to
always reference the field in the table.

25
00:02:01,530 --> 00:02:04,820
So my preference is to always use the like
statement.

26
00:02:04,820 --> 00:02:08,280
So when declared in my packed decimal
fields for currencies and

27
00:02:08,280 --> 00:02:13,120
quantities, I will always reference the
table whose data I'm going to

28
00:02:13,120 --> 00:02:18,020
be reading into my variable, or passing
data from my variable to.

29
00:02:20,330 --> 00:02:24,402
So let's take a look at how we would
normally define a currency field in our

30
00:02:24,402 --> 00:02:25,003
program.

31
00:02:25,003 --> 00:02:33,045
[BLANK_AUDIO]

32
00:02:33,045 --> 00:02:38,105
Here we go, so you can see I've used the
data statements, created a field called my

33
00:02:38,105 --> 00:02:43,336
salary, and I'm using the like statement
to reference our Zed employee's two table

34
00:02:43,336 --> 00:02:45,462
[BLANK_AUDIO]

35
00:02:45,462 --> 00:02:47,440
And the specific field, salary.

36
00:02:49,910 --> 00:02:53,940
Now because we link our field in our
program with the field in there about

37
00:02:53,940 --> 00:02:59,480
dictionary, the system must always make
sure that the data types are kept in sync.

38
00:02:59,480 --> 00:03:03,800
And there are two aspects to this process,
the number of decimal places and

39
00:03:03,800 --> 00:03:06,190
the associated currency or quantity keys.

40
00:03:07,740 --> 00:03:12,640
So as we saw when we set up the salary
field in the ABAP dictionary,

41
00:03:12,640 --> 00:03:18,810
a currency field corresponds to an amount
field of [UNKNOWN] d e c, decimal.

42
00:03:18,810 --> 00:03:22,940
Let's have a look.
So let's pop over to the ABAP dictionary

43
00:03:27,070 --> 00:03:30,910
have a look at our table and here we have
the salary field.

44
00:03:30,910 --> 00:03:32,750
And we can see it's currency type nine.

45
00:03:32,750 --> 00:03:36,073
If we double-click on the data elements,

46
00:03:36,073 --> 00:03:39,500
we can see that the domain is currency
nine.

47
00:03:39,500 --> 00:03:41,512
We'll double-click that.

48
00:03:41,512 --> 00:03:44,020
And then let's do a drop-down in the data
type here.

49
00:03:46,620 --> 00:03:50,520
And it gives us a hint that the currency
field is stored as a decimal.

50
00:03:53,320 --> 00:03:54,755
And something else we can do.

51
00:03:54,755 --> 00:04:00,211
[BLANK_AUDIO]

52
00:04:00,211 --> 00:04:05,707
If we just double-click on the currency
type here, we get a screen that shows us

53
00:04:05,707 --> 00:04:11,135
the internal format for our ABAP programs
uses ABAP type p for packed decimal.

54
00:04:17,065 --> 00:04:21,180
And don't forget, when we set this salary
field up We had to reference

55
00:04:21,180 --> 00:04:26,240
a currency key field, which we declared as
e-currency.

56
00:04:27,800 --> 00:04:30,830
So these two fields always go hand in
hand.

57
00:04:30,830 --> 00:04:37,400
A currency field always references the
currency key, which is of type c u

58
00:04:37,400 --> 00:04:43,790
k y which in ABAP world have a data time
per character.

59
00:04:43,790 --> 00:04:46,960
And have a fixed length of five, which we
can see here.

60
00:04:48,450 --> 00:04:52,472
So what this all boils down to is when you
are declaring your field in

61
00:04:52,472 --> 00:04:57,400
ABAP reference fields that they associate
with in your table.

62
00:04:58,410 --> 00:05:01,410
And always bear in mind that every
currency field will

63
00:05:02,740 --> 00:05:05,530
have a currency key that, more often than
not,

64
00:05:05,530 --> 00:05:09,700
you have to take into account when
outputting results to a report.

65
00:05:09,700 --> 00:05:13,320
And then for quantity fields the same sort
of thing applies.

66
00:05:13,320 --> 00:05:19,850
But instead of having a data type of
currency, quantity fields, let's see if we

67
00:05:22,110 --> 00:05:28,290
can show this, have a data type of Q-U-A-N
here we go.

68
00:05:29,700 --> 00:05:36,086
And instead of having a currency key, they
will have a unit associated with them.

69
00:05:36,086 --> 00:05:41,670
[BLANK_AUDIO]

70
00:05:41,670 --> 00:05:44,020
Let's step out of this and go back to our
program.

71
00:05:44,020 --> 00:05:51,400
Let's go on and create an example to
calculate an employees tax

72
00:05:52,470 --> 00:05:57,240
and net pay amount so here in the data

73
00:05:57,240 --> 00:06:02,540
declaration section of the program I've
already defined my salary.

74
00:06:04,240 --> 00:06:12,770
So what I'm gonna do, is also declare a
tax amount.

75
00:06:12,770 --> 00:06:21,660
And the tax amount is going to be a very
similar field to salary.

76
00:06:21,660 --> 00:06:29,403
And that is a currency with two decimal
places so

77
00:06:29,403 --> 00:06:34,243
I'll just reference the same

78
00:06:34,243 --> 00:06:38,308
field in our table then,

79
00:06:38,308 --> 00:06:43,546
[SOUND] let's declare a net pay.

80
00:06:43,546 --> 00:06:45,879
Same again, we'll reference the same
field.

81
00:06:45,879 --> 00:06:54,004
[BLANK_AUDIO]

82
00:06:54,004 --> 00:06:57,003
And we'll declare a tax percentage.

83
00:06:57,003 --> 00:07:04,920
[BLANK_AUDIO]

84
00:07:04,920 --> 00:07:10,045
And pretty it up.

85
00:07:10,045 --> 00:07:15,577
So spell decimals correctly so now we have
our fields

86
00:07:15,577 --> 00:07:22,504
defined let's go to the bottom of this
program and start coding.

87
00:07:22,504 --> 00:07:32,504
[BLANK_AUDIO]

88
00:07:40,296 --> 00:07:45,557
And what we're going to do is select
records from our table,

89
00:07:45,557 --> 00:07:48,752
calculate the tax, our net pay, and

90
00:07:48,752 --> 00:07:53,807
then output the results to a report so to
save some time, so

91
00:07:53,807 --> 00:08:00,962
you don't have to watch me make spelling
mistakes I've all ready coded this out.

92
00:08:00,962 --> 00:08:05,828
I'll just paste it into the program and

93
00:08:05,828 --> 00:08:10,548
then also, we need one more statement

94
00:08:10,548 --> 00:08:15,130
at the top and then I'll explain it.

95
00:08:15,130 --> 00:08:15,800
Okay.

96
00:08:15,800 --> 00:08:21,000
So because we're going to read data from a
database table using a select statement.

97
00:08:21,000 --> 00:08:25,600
We're going to declare the table at the
top of our program, Zed employees two.

98
00:08:25,600 --> 00:08:28,400
Then we'll go back down to the bottom.

99
00:08:31,040 --> 00:08:34,640
And I've written a select statement from
the table,

100
00:08:35,640 --> 00:08:38,590
then we're going to write out the employee
surname.

101
00:08:38,590 --> 00:08:40,630
Their salary and the currency.

102
00:08:40,630 --> 00:08:44,567
Let me bring

103
00:08:44,567 --> 00:08:49,700
this stuff up.

104
00:08:49,700 --> 00:08:52,040
The next thing, we're going to calculate
the tax amount,

105
00:08:52,040 --> 00:08:56,430
and that's by taking the tax percentage.

106
00:08:58,080 --> 00:09:00,240
Multiplied by the employee's salary.

107
00:09:00,240 --> 00:09:06,628
So then the net pay amount, is the salary
minus the tax amount.

108
00:09:06,628 --> 00:09:10,878
Then we're going to output the results
onto the screen.

109
00:09:10,878 --> 00:09:13,295
But there's one thing we haven't done.

110
00:09:13,295 --> 00:09:15,590
And I believe that's tax percentage.

111
00:09:15,590 --> 00:09:19,890
Actually, worked out what the percentage
is or should I say.

112
00:09:19,890 --> 00:09:24,560
We haven't declared what the tax
percentage is so

113
00:09:24,560 --> 00:09:26,300
in the data declaration path.

114
00:09:26,300 --> 00:09:28,586
I'll tell you what.

115
00:09:28,586 --> 00:09:29,670
Let's do it down below in the code.

116
00:09:33,360 --> 00:09:38,175
So we're going to say our

117
00:09:38,175 --> 00:09:43,220
tax percentage is equal to

118
00:09:43,220 --> 00:09:48,503
20 to represent 20%.

119
00:09:48,503 --> 00:09:52,211
[BLANK_AUDIO]

120
00:09:52,211 --> 00:09:53,093
Oops.

121
00:09:53,093 --> 00:09:55,086
There we go.

122
00:09:55,086 --> 00:09:59,480
[SOUND]

123
00:09:59,480 --> 00:10:04,753
Okay.

124
00:10:04,753 --> 00:10:08,503
Now just before we run the program, let's
have a quick peek at the data.

125
00:10:08,503 --> 00:10:19,378
[BLANK_AUDIO]

126
00:10:19,378 --> 00:10:22,542
Now we have two, four, we have six records
but

127
00:10:22,542 --> 00:10:26,940
as you can see only three have salary
information in currency.

128
00:10:26,940 --> 00:10:28,540
So let's change that.

129
00:10:29,560 --> 00:10:32,920
Let's edit these records and key in some
values.

130
00:10:32,920 --> 00:10:42,920
[BLANK_AUDIO]

131
00:11:07,378 --> 00:11:10,962
And what should we choose for the last
one?

132
00:11:10,962 --> 00:11:12,030
Fiji Dollars.

133
00:11:15,910 --> 00:11:16,790
Okay, let's step back, and

134
00:11:16,790 --> 00:11:21,090
now we can see these records have values
in the salary and currency field.

135
00:11:21,090 --> 00:11:23,500
All looks good.

136
00:11:23,500 --> 00:11:29,045
So let's close that window, and we'll test
a report

137
00:11:29,045 --> 00:11:34,379
[BLANK_AUDIO]

138
00:11:34,379 --> 00:11:37,670
So here we are the first record Smith.

139
00:11:37,670 --> 00:11:41,600
In salary he's one one one one and we have
the currency code.

140
00:11:43,370 --> 00:11:48,992
Then we output the tax amount and the tax
currency,

141
00:11:48,992 --> 00:11:53,711
and the net pay amount, net pay currency.

142
00:11:53,711 --> 00:11:58,496
So the tax amount should be 20% of one,
one,

143
00:11:58,496 --> 00:12:02,336
one, one and that looks about right.

144
00:12:02,336 --> 00:12:07,320
And that should be taken off the salary to
think of it as net pay Just to

145
00:12:07,320 --> 00:12:09,425
make it a little bit tidier.

146
00:12:09,425 --> 00:12:14,128
[BLANK_AUDIO]

147
00:12:14,128 --> 00:12:16,795
Let's include some descriptive text.

148
00:12:16,795 --> 00:12:26,795
[BLANK_AUDIO]

149
00:12:37,461 --> 00:12:38,587
Run it again.

150
00:12:38,587 --> 00:12:39,920
And there we can see.

151
00:12:39,920 --> 00:12:43,920
But let's tidy up a bit more.

152
00:12:43,920 --> 00:12:45,420
I am picky.

153
00:12:45,420 --> 00:12:51,628
[BLANK_AUDIO]

154
00:12:51,628 --> 00:12:53,420
Let's skip a line.

155
00:12:53,420 --> 00:13:00,420
[BLANK_AUDIO]

156
00:13:00,420 --> 00:13:04,426
There we go, so Smith the salary currency,

157
00:13:04,426 --> 00:13:08,878
the tax amount is this and the net amount
is this.

158
00:13:08,878 --> 00:13:11,020
All with the currencies in there.

159
00:13:15,180 --> 00:13:16,130
And that wraps up this module.

