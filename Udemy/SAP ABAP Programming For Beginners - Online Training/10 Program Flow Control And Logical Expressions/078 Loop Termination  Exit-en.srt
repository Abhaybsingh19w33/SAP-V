1
00:00:02,100 --> 00:00:04,990
We can also use the exit
statement to terminate loops.

2
00:00:06,310 --> 00:00:10,420
The exit statement allows us to
terminate a loop immediately

3
00:00:10,420 --> 00:00:12,240
without any condition being checked.

4
00:00:13,370 --> 00:00:17,180
And you may think, well isn't this
the same as the continue statement?

5
00:00:18,230 --> 00:00:22,092
Well it sounds as though it's the same,
but there is a difference.

6
00:00:22,092 --> 00:00:26,050
Where the continue statement stops
processing the current loop and

7
00:00:26,050 --> 00:00:29,010
jumps back the top of
the loop to carry on,

8
00:00:29,010 --> 00:00:32,530
the exit statement terminates
the whole loop itself.

9
00:00:33,610 --> 00:00:39,200
So once the processor meets the exit
statement, the whole loop will finish and

10
00:00:39,200 --> 00:00:44,110
the program will continue to process
a statement immediately following

11
00:00:44,110 --> 00:00:49,890
the closing statement of your loop,
such as the end do or the end while.

12
00:00:51,440 --> 00:00:57,630
Now keep in mind, because we can exit
loops using this exit statement,

13
00:00:57,630 --> 00:00:59,590
it will only exit the current loop.

14
00:01:01,150 --> 00:01:03,900
So if we have nested loops, and

15
00:01:03,900 --> 00:01:09,120
we hit our exit statement within, say,
the second level of the nested loop

16
00:01:10,290 --> 00:01:14,960
only that level loop will terminate, and
we'll go back to the higher level loop.

17
00:01:16,390 --> 00:01:21,300
Now the exit statement can also be used
outside of loops, just like the check

18
00:01:21,300 --> 00:01:26,480
statement, but you've got to be aware that
if you use the exit statement outside

19
00:01:26,480 --> 00:01:33,410
of a loop it will terminate whatever type
of code structure you are currently in.

20
00:01:33,410 --> 00:01:38,410
So for example, if you used the exit
statement within a subroutine it will

21
00:01:38,410 --> 00:01:42,710
terminate the subroutine and processing
will return back to the calling program.

22
00:01:43,870 --> 00:01:48,460
If you use the exit statement in your
calling program and it's not in a loop or

23
00:01:48,460 --> 00:01:52,760
a different event structure then it will
actually terminate your whole program.

24
00:01:54,350 --> 00:01:57,240
So just be aware of where you use it,
what context.

25
00:01:58,620 --> 00:02:00,962
So let's have a look at the code, and

26
00:02:00,962 --> 00:02:05,815
see how we can use the exit statement in
the examples being looking at so far.

27
00:02:10,958 --> 00:02:16,226
So with our example do loop, let's change
this code so instead of having this check

28
00:02:16,226 --> 00:02:21,440
statement, let's change this back to
an if statement like we've had it before.

29
00:02:27,770 --> 00:02:35,113
And let's do this, if the SY index
is equal to three, let's exit.

30
00:02:48,011 --> 00:02:52,312
And what I'm going to do here is just
write another couple of write statements,

31
00:02:52,312 --> 00:02:53,607
just to act as fillers.

32
00:03:05,426 --> 00:03:12,950
So that once our loop exits, we still have
some code that will execute afterwards.

33
00:03:12,950 --> 00:03:16,730
So by looking at the code, it should
be pretty straightforward how it works.

34
00:03:16,730 --> 00:03:20,120
We step inside our loop.

35
00:03:20,120 --> 00:03:24,820
When we meet the third
iteration of the loop

36
00:03:26,790 --> 00:03:31,975
this if command will return true and
therefore execute our exit statement.

37
00:03:31,975 --> 00:03:35,093
Now note there's nothing else you
need to add to the exit statement.

38
00:03:35,093 --> 00:03:38,065
That's all there is to it so
it's pretty simple.

39
00:03:39,505 --> 00:03:41,795
Once the exit statement is met,

40
00:03:41,795 --> 00:03:46,355
then processing will drop
straight down to the loop and

41
00:03:46,355 --> 00:03:49,815
jump to the two write statements
we have at the end of the program.

42
00:03:52,460 --> 00:03:54,810
So let's do a syntax check, activate it.

43
00:03:57,480 --> 00:04:01,860
Oh, just one thing,
we have a rogue check statement just here.

44
00:04:03,080 --> 00:04:05,010
Let's take that guy out.

45
00:04:05,010 --> 00:04:06,740
I'm sick of seeing this little fellow.

46
00:04:06,740 --> 00:04:11,350
And, you know while we're at it,
let's comment out this.

47
00:04:11,350 --> 00:04:12,726
Okay, let's activate again.

48
00:04:15,630 --> 00:04:18,985
That looks better.

49
00:04:18,985 --> 00:04:22,632
Let's get rid of this break point and

50
00:04:22,632 --> 00:04:27,465
we'll set it up here on
the initialization of A.

51
00:04:27,465 --> 00:04:30,747
And now we can test the program.

52
00:04:30,747 --> 00:04:33,150
So I would just press F5 to step through.

53
00:04:37,967 --> 00:04:39,710
And we are in the first iteration.

54
00:04:43,455 --> 00:04:48,443
And the second, and
now SY index equals three.

55
00:04:48,443 --> 00:04:54,362
So we should execute the exit statements.

56
00:04:54,362 --> 00:04:59,420
Which we do,
it doesn't continue doing the loop.

57
00:04:59,420 --> 00:05:04,941
Jumps to the top and
then straight back out to the end.

58
00:05:04,941 --> 00:05:08,342
And continues with our
write filler statements.

59
00:05:12,491 --> 00:05:13,686
So we'll step out.

60
00:05:13,686 --> 00:05:15,190
And then let's do one more change.

61
00:05:18,220 --> 00:05:21,216
Just to show this in action.

62
00:05:21,216 --> 00:05:24,910
If we have it outside of the loop.

63
00:05:29,613 --> 00:05:32,937
We should never get to
execute any of this code.

64
00:05:32,937 --> 00:05:37,097
As soon as the exit statement
is hits within our program,

65
00:05:37,097 --> 00:05:39,444
our program should terminate.

66
00:05:41,627 --> 00:05:42,440
Let's test it.

67
00:05:44,843 --> 00:05:46,751
As our break point.

68
00:05:46,751 --> 00:05:49,712
Five and five again.

69
00:05:49,712 --> 00:05:50,525
And there we go.

70
00:05:50,525 --> 00:05:58,411
The program exited without writing
anything out to the screen.

