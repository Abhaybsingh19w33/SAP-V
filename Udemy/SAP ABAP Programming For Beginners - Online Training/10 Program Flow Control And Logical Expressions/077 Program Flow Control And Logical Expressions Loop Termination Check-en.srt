1
00:00:02,020 --> 00:00:05,060
The next statement we'll have a look at to
terminate

2
00:00:05,060 --> 00:00:07,950
the processing of a block is a check
statement.

3
00:00:10,290 --> 00:00:14,100
The check statement allows us to terminate
loop pass,

4
00:00:14,100 --> 00:00:16,820
just like the continue statement does.

5
00:00:16,820 --> 00:00:20,750
But It allows us to check certain
conditions.

6
00:00:20,750 --> 00:00:22,160
We can use some sort of logic.

7
00:00:23,390 --> 00:00:28,220
So when we define our check statements and
define the logic, if the condition

8
00:00:28,220 --> 00:00:33,370
is not true, any remaining statements in
our current statement block.

9
00:00:33,370 --> 00:00:37,400
After the check statements will be ignored
and

10
00:00:37,400 --> 00:00:41,100
the next loop pass will start, just as it
did with the continue statements.

11
00:00:42,380 --> 00:00:47,720
The check statement is a little bit like a
combination of the if statements and

12
00:00:47,720 --> 00:00:50,080
continue statement we used in the last
exercise.

13
00:00:51,960 --> 00:00:53,760
Let's have a look at the code and see it
in action.

14
00:00:55,280 --> 00:01:01,180
So here we have the due statement from our
previous exercise.

15
00:01:01,180 --> 00:01:02,130
So let's edit this.

16
00:01:03,800 --> 00:01:06,410
And we will keep the due 15 times or just
take the break point off for now.

17
00:01:06,410 --> 00:01:12,650
Looks way better, we will increment the
variable A.

18
00:01:13,950 --> 00:01:21,050
And then we will say, instead of the F,
check SY index not equal to two.

19
00:01:21,050 --> 00:01:30,830
And then we will get rid of these two.

20
00:01:32,190 --> 00:01:36,960
So this will check to see if the sy-index
system variable

21
00:01:36,960 --> 00:01:38,290
does not equal the value of two.

22
00:01:40,000 --> 00:01:44,060
And if that statement is true, it will
carry on processing the code.

23
00:01:44,060 --> 00:01:48,730
If the statement is untrue, the right
statement will not be executed,

24
00:01:48,730 --> 00:01:53,210
because processing will jump straight to
the top of the DO statements again.

25
00:01:54,370 --> 00:02:00,267
Let's debug the code and see how it works.

26
00:02:00,267 --> 00:02:05,595
[SOUND] We will have

27
00:02:05,595 --> 00:02:12,703
a look at XY index and A.

28
00:02:12,703 --> 00:02:14,710
And then I'll press F5 to step through.

29
00:02:18,950 --> 00:02:20,920
So S-Y index has a value of one at the
moment.

30
00:02:23,070 --> 00:02:26,140
So that's fine, we know that one is not
the same as two.

31
00:02:26,140 --> 00:02:29,348
So it will write out our statement to the
screen.

32
00:02:29,348 --> 00:02:37,440
Our next run-through Now this time, SY
index is equal to two.

33
00:02:37,440 --> 00:02:41,350
So our statement is not correct.

34
00:02:41,350 --> 00:02:43,690
So we should terminate the processing of
this loop, and

35
00:02:43,690 --> 00:02:46,860
go straight back to the top, let's have a
look.

36
00:02:46,860 --> 00:02:52,240
I'll press F5, there we go, it jumps
straight to the top of the loop.

37
00:02:52,240 --> 00:02:56,940
Now it's equal to three, so it should
execute the right statements, and it does,

38
00:02:56,940 --> 00:02:58,790
and so on.

39
00:02:58,790 --> 00:03:04,590
So it should execute it 15 times I'll
press F8 to zoom and there we go.

40
00:03:05,760 --> 00:03:12,070
Process 15 times but missing the second
write statement.

41
00:03:12,070 --> 00:03:16,790
So it's very similar to using the if and
continue statements in the last exercise

42
00:03:16,790 --> 00:03:18,860
but we can do it with just one line of
code.

43
00:03:19,920 --> 00:03:24,460
And when you are looking at programs that
have been created by other people, and

44
00:03:24,460 --> 00:03:29,520
maybe creating programs yourself further
down the line, don't be surprised

45
00:03:29,520 --> 00:03:34,010
to see the check statement outside of
loops like the do loop or the while loop.

46
00:03:35,110 --> 00:03:39,420
Because the check statements only
terminate an individual loop run,

47
00:03:39,420 --> 00:03:44,350
called loop pass, but it can also be used
to check

48
00:03:44,350 --> 00:03:48,170
other processing blocks, like subroutines
or events.

49
00:03:49,720 --> 00:03:51,960
And a check statement is executed,

50
00:03:51,960 --> 00:03:56,160
it all depends at what level in your
program it is being executed.

51
00:03:57,310 --> 00:04:00,690
If our check statement was outside of this
loop,

52
00:04:00,690 --> 00:04:02,560
then it would actually terminate our
program.

53
00:04:03,890 --> 00:04:07,010
If it was inside another processing block,

54
00:04:07,010 --> 00:04:10,120
maybe the app screen selection processing
log.

55
00:04:10,120 --> 00:04:13,800
Or they would terminate that block of
code.

56
00:04:13,800 --> 00:04:16,430
So you can use the check statement
whenever you like.

57
00:04:16,430 --> 00:04:20,620
Just be aware of where you're using it
because that will have a big impact

58
00:04:20,620 --> 00:04:24,470
on the processing of your code.

59
00:04:24,470 --> 00:04:26,590
Let's have a quick example here.

60
00:04:26,590 --> 00:04:29,360
Let's take the check statement outside
this loop, and

61
00:04:29,360 --> 00:04:32,420
just see it in practice on how it will
terminate our program.

62
00:04:36,550 --> 00:04:38,152
Cred a few blank lines.

63
00:04:38,152 --> 00:04:42,174
I'm gonna stick the asterisk there so
we've always got a few blank lines for us.

64
00:04:42,174 --> 00:04:46,808
[BLANK_AUDIO]

65
00:04:46,808 --> 00:04:52,710
And, all I'm gonna do is write a brand new
check statement here.

66
00:04:52,710 --> 00:04:56,230
So check More say, we'll change the value
of A.

67
00:04:59,220 --> 00:05:01,750
So we're gonna check the value of A is
equal to 1.

68
00:05:01,750 --> 00:05:07,060
Now of course, we can see here, we're
setting the value of A to 0.

69
00:05:07,060 --> 00:05:09,580
So this is never gonna be true.

70
00:05:09,580 --> 00:05:12,580
Which means, it's not gonna process the
rest of our code.

71
00:05:12,580 --> 00:05:19,238
[SOUND] let's activate it.

72
00:05:19,238 --> 00:05:24,550
We'll stick a breakpoint, well, let's get
rid of this one first.

73
00:05:24,550 --> 00:05:25,574
Stick a breakpoint here.

74
00:05:25,574 --> 00:05:29,277
[BLANK_AUDIO]

75
00:05:29,277 --> 00:05:30,710
So we'll set the value of A to zero.

76
00:05:31,810 --> 00:05:35,005
And now we'll do the check statement.

77
00:05:35,005 --> 00:05:42,624
[SOUND] and the program ends.

78
00:05:42,624 --> 00:05:46,782
So as soon as I hit the check statement
and the value was not true,

79
00:05:46,782 --> 00:05:52,172
the check statement caused processing of
our code to step out of the current block,

80
00:05:52,172 --> 00:05:54,948
which in this case was the program itself.

81
00:05:54,948 --> 00:05:57,889
[BLANK_AUDIO]

