1
00:00:01,810 --> 00:00:04,720
So far we've learned how to read data from
database tables.

2
00:00:05,850 --> 00:00:11,620
It's now time to take a look at how we can
modify and delete data using ABAP.

3
00:00:13,740 --> 00:00:17,590
There are some important concepts to keep
in mind when going through this module

4
00:00:18,730 --> 00:00:22,310
including the architecture of our system.

5
00:00:22,310 --> 00:00:28,450
Now as a reminder, we have a three tier
architecture, we have the client who uses

6
00:00:28,450 --> 00:00:33,380
the tool such as the SAP GUI to request
data from the application server, our

7
00:00:33,380 --> 00:00:38,840
second tier, which in turn communicates
with the database server, our third tier.

8
00:00:40,590 --> 00:00:45,190
Now when we create our programs, we have
to keep in mind that there could

9
00:00:45,190 --> 00:00:49,740
be tens,100, maybe 1000 of users all

10
00:00:49,740 --> 00:00:54,740
accessing the same data at the same time,
and we need to ensure the programs that

11
00:00:54,740 --> 00:00:59,600
we create do not cause any problems with
the rest of the system, and

12
00:00:59,600 --> 00:01:03,780
ensure we access the most recent version
of the data.

13
00:01:03,780 --> 00:01:07,120
Held on the database when our program
runs.

14
00:01:07,120 --> 00:01:08,410
Because think about it.

15
00:01:08,410 --> 00:01:13,780
If you've got 1000 of users, you've got
records probably being updated every

16
00:01:13,780 --> 00:01:19,160
single minute of every single working day,
and you need to make sure your programs

17
00:01:19,160 --> 00:01:23,960
can read, add, and update data that is
current in the system.

18
00:01:26,200 --> 00:01:32,520
Now fortunately for us an SAP system takes
care of a lot of this work for us.

19
00:01:32,520 --> 00:01:36,730
And the ABAP programmer doesn't have to
worry about the underlying technology

20
00:01:36,730 --> 00:01:41,030
of how records are locked and being used
by other programs at the same time.

21
00:01:42,230 --> 00:01:46,680
And one of the key tools that we'll use in
our programs is what we call open SQL.

22
00:01:46,680 --> 00:01:50,410
And no doubt many of you have heard of
SQL.

23
00:01:50,410 --> 00:01:53,140
It's standard query language.

24
00:01:53,140 --> 00:01:57,040
SAP, I've introduced what's called open
SQL

25
00:01:57,040 --> 00:02:00,470
which acts like an interface between our
program and the database.

26
00:02:02,476 --> 00:02:07,230
By using Open SQL, we can read the
modified data, and

27
00:02:07,230 --> 00:02:11,350
also buffer data, on the application
server, which in turn

28
00:02:11,350 --> 00:02:16,070
reduces the number of database accesses
our system has to perform.

29
00:02:16,070 --> 00:02:21,740
And it's the database interface which is
also responsible for synchronizing

30
00:02:21,740 --> 00:02:26,420
the buffers with the database tables at
predetermined intervals.

31
00:02:26,420 --> 00:02:31,790
And when we are creating programs we've
got to keep in mind that if data is

32
00:02:31,790 --> 00:02:38,920
buffered and we are reading this buffered
data it may not always be up to date.

33
00:02:38,920 --> 00:02:43,380
So when we create tables, we need to
create them in such a way that

34
00:02:43,380 --> 00:02:47,690
we tell the system that buffering can be
used or it can't be used.

35
00:02:47,690 --> 00:02:50,930
Or maybe it can only be used in certain
situations.

36
00:02:50,930 --> 00:02:56,030
And when we created our example table in
the system in the earlier module.

37
00:02:56,030 --> 00:03:01,160
We touched on this, and we told the system
that for our table do not use

38
00:03:01,160 --> 00:03:06,120
buffering and by using this setting that
meant every time we read

39
00:03:06,120 --> 00:03:11,270
data from our table we we will always read
the most up to date records.

40
00:03:11,270 --> 00:03:16,180
We will not be accessing data that was
read from

41
00:03:16,180 --> 00:03:20,700
the table say five seconds, ten seconds or
even a minute, five minutes ago.

42
00:03:22,680 --> 00:03:26,470
Now, buffering can be great for tables
that hold master data and

43
00:03:26,470 --> 00:03:31,350
configuration settings because data in
those type of tables

44
00:03:31,350 --> 00:03:37,250
don't get updated on a regular basis, but
when we're working transactional data,

45
00:03:37,250 --> 00:03:41,740
its a whole nother ball game, because if
you've got 1000 of users

46
00:03:41,740 --> 00:03:46,160
telling the application server to process
transactions on transactional data.

47
00:03:46,160 --> 00:03:51,280
But when we read that data, we want it to
be as up-to-date as we can,

48
00:03:52,340 --> 00:03:56,080
so we don't want buffering set on
transactional data.

49
00:03:56,080 --> 00:04:00,210
And if you are dealing with transactional
data, whether tables are configured

50
00:04:00,210 --> 00:04:05,460
to use buffering, you have to insure your
program can take this into account.

51
00:04:05,460 --> 00:04:10,320
And make sure the buffer gets updated with
brand new data at the time you need it.

52
00:04:12,270 --> 00:04:13,390
Now back to open SQL.

53
00:04:15,690 --> 00:04:18,050
Remember, I said that open SQL

54
00:04:18,050 --> 00:04:21,670
acts as an interface between our programs
and the database.

55
00:04:23,380 --> 00:04:26,510
When we use open SQL statements in our
program

56
00:04:26,510 --> 00:04:31,790
we are only allowed to access tables
through the ABAP dictionary.

57
00:04:31,790 --> 00:04:33,430
This is our interface.

58
00:04:33,430 --> 00:04:37,640
We don't actually access the database
tables directly.

59
00:04:37,640 --> 00:04:42,210
Through our programs now there's no need
to worry

60
00:04:42,210 --> 00:04:46,880
about how we go about doing this because,
in our programs,

61
00:04:46,880 --> 00:04:52,940
we use open SQL statements just as though
we were accessing the database tables.

62
00:04:52,940 --> 00:04:53,970
Directly.

63
00:04:53,970 --> 00:04:55,760
We don't have to think about it.

64
00:04:55,760 --> 00:05:00,790
Open SQL as an interface manages the
database access all by itself.

65
00:05:01,800 --> 00:05:04,510
All we need to do is code our statements

66
00:05:04,510 --> 00:05:06,750
just as though we were accessing the
tables.

67
00:05:08,060 --> 00:05:12,752
But we will have the underlying knowledge
that by using open SQL we

68
00:05:12,752 --> 00:05:16,593
are accessing the data through the ABAP
dictionary,

69
00:05:16,593 --> 00:05:21,198
which has a built in level of safety, to
insure our ABAP code does

70
00:05:21,198 --> 00:05:25,500
not have a direct effect on the SAP
database system itself.

71
00:05:25,500 --> 00:05:28,889
[BLANK_AUDIO]

