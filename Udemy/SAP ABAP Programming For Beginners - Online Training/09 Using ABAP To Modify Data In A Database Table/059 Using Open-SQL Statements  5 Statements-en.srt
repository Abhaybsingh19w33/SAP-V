1
00:00:01,800 --> 00:00:04,880
So, there are five basic OpenSQL
statements,

2
00:00:04,880 --> 00:00:08,390
that we will use all the time in our
programs.

3
00:00:10,000 --> 00:00:14,596
And these are, select, insert,

4
00:00:14,596 --> 00:00:18,883
update, modify, and delete.

5
00:00:19,930 --> 00:00:22,610
So, first of all, there's select
statements.

6
00:00:22,610 --> 00:00:24,930
And, you should be familiar with this
already,

7
00:00:24,930 --> 00:00:26,526
because we've used it in quite a few
programs.

8
00:00:26,526 --> 00:00:29,350
And, the select statement,

9
00:00:29,350 --> 00:00:34,250
allows us to select records, to use in our
program, from database tables.

10
00:00:35,690 --> 00:00:37,650
Next up, we have the insert statement.

11
00:00:39,010 --> 00:00:43,120
This allows us to insert new records into
a database table.

12
00:00:43,120 --> 00:00:45,710
Then we have update, and

13
00:00:45,710 --> 00:00:50,130
the update allows us to modify records
that already exist in the table.

14
00:00:51,390 --> 00:00:55,664
And then, we have a modify statement,
which does the same, but

15
00:00:55,664 --> 00:01:00,909
there is a slight difference, that we will
come to, and lastly, the delete.

16
00:01:00,909 --> 00:01:05,425
And yep, we can delete records from a
table.

17
00:01:05,425 --> 00:01:09,618
Now, whenever we use any of these
statements in an ABAP program,

18
00:01:09,618 --> 00:01:14,041
I want you to get into the habit of
checking to see if the action that you

19
00:01:14,041 --> 00:01:17,322
have executed, has been executed
successfully,

20
00:01:17,322 --> 00:01:21,287
because if we try to insert a record into
a database table, and

21
00:01:21,287 --> 00:01:27,675
it actually didn't get inserted correctly,
or maybe it didn't get inserted at all.

22
00:01:27,675 --> 00:01:29,240
Then we need to know this, so

23
00:01:29,240 --> 00:01:32,440
that we can take the appropriate action,
in our program.

24
00:01:34,150 --> 00:01:37,460
And you do this, by using a system field,

25
00:01:37,460 --> 00:01:42,120
that you have already seen, when we took a
look at DBook in our program.

26
00:01:43,370 --> 00:01:45,360
And this is Sy-Subrc.

27
00:01:45,360 --> 00:01:52,850
And when one of our statements is executed
successfully,

28
00:01:52,850 --> 00:01:56,990
this field will contain a value of zero,
so

29
00:01:56,990 --> 00:02:00,970
all we need to do is check for a value of
zero, and then continue with our program.

30
00:02:02,030 --> 00:02:04,890
But, we need to check if it doesn't
contain a zero.

31
00:02:06,050 --> 00:02:09,070
If our statement was not carried out
successfully,

32
00:02:09,070 --> 00:02:12,910
this variable, will contain some other
value, and

33
00:02:12,910 --> 00:02:17,740
depending on the individual statement, the
value can have a different meaning.

34
00:02:19,000 --> 00:02:22,530
Therefore, you must make sure you
understand what the different

35
00:02:22,530 --> 00:02:26,890
return codes are, for the different ABAP
statement you were using.

36
00:02:26,890 --> 00:02:31,210
You will find that in practice, it becomes
second nature, and many of the standard

37
00:02:31,210 --> 00:02:36,740
statements, use the same return code, to
represent similar results.

38
00:02:36,740 --> 00:02:38,300
But don't count on this.

39
00:02:38,300 --> 00:02:43,510
Make sure you know how, to check the
individual return code for each statement,

40
00:02:43,510 --> 00:02:46,780
and you know what each of the individual
return codes, means.

41
00:02:47,930 --> 00:02:50,750
That way, you can code your program
accordingly,

42
00:02:50,750 --> 00:02:53,930
to take the right action, depending, on
the results.

43
00:02:55,100 --> 00:02:57,690
Now let's move on and start using some of
these statements in a program.

